/****************************************************************** 
	Licensed Materials - Property of IBM

	5698-WSE
	(C) Copyright IBM Corp. 2014-2015 All Rights Reserved.
	US Government Users Restricted Rights - Use, duplication,
	or disclosure restricted by GSA ADP Schedule Contract with
	IBM Corp.

*******************************************************************/
var Step = require("step"); // npm install step

var iws = require("iws-light");
var util = require("util");
var assert = require("assert");

var ConnLocalHost = "https://8c58b084d05d4388bee445fe38a271fb%40bluemix.net:0S%3DD2AMN%2FxTbLoCnXWURmmCM%26ctbaa@sidr37wamxo-114.wa.ibmserviceengage.com/ibm/TWSWebUI/Simple/rest?tenantId=CH&engineName=engine&engineOwner=engine";

if(process.env.VCAP_SERVICES) {
	wsConn = iws.createConnection();
} else {
	wsConn = iws.createConnection(ConnLocalHost);
}



if( 0 ) conn.enableLogging(true);

// Standard callback    
function callback( err, data ) {
    console.log( "*** CALLBACK" );

    if( err ) {
        console.log( "*** ERROR!" );
        console.log( err );
        return;
    }
    
    console.log( util.inspect(data, {depth:null}) );
}

// Process API test
(function () {
    var processLibraryId = null;
    var processDescription = "This process does nothing";
    var createdProcess = null;
    
    console.log( "Testing process API..." );
    
    Step(
        function createProcessLibrary() {
            console.log( "Creating library..." );
        
            conn.createProcessLibrary( {name:"Test library"}, this );
        },
        function createProcess( err, library ) {
            processLibraryId = library.id;
        
            var process = new iws.Process( "A test process" );

            process.tasklibraryid = processLibraryId;

            console.log("Library created (id = " + processLibraryId + "), creating process...");
            
            conn.createProcess( process, this );
        },
        function onProcessCreated( err, process ) {
            if( err ) throw err;
            
            createdProcess = process;
            
            console.log("Process created (id = " + process.id + "), verifying library..." );
            
            conn.getProcesses( {id: processLibraryId}, this );
        },
        function verifyProcessInLibrary( err, library ) {
            if( err ) throw err;
            
            assert( library.filter( function(item) { return item.id === createdProcess.id; } ).length == 1, "Process not found in library" );
            
            console.log("Library verified, updating process...");
            
            createdProcess.description = processDescription;
            conn.updateProcess( createdProcess, this );
        },
        function onDescriptionChanged( err, data ) {
            if( err ) throw err;
            
            console.log("Update complete, reading back process...");
            
            conn.getProcess( {id: createdProcess.id}, this );
        },
        function verifyDescription( err, process ) {
            assert( process.description === processDescription, "Process description does not match" );
            assert( process.id === createdProcess.id, "Process id does not match" );
            
            console.log("Update verified, deleting process...");
            
            conn.deleteProcess( process, this );
        },
        function onProcessDeleted( err, data ) {
            if( err ) throw err;
            
            console.log("Process deleted, verifying library...");
            
            conn.getProcesses( {id: processLibraryId}, this );
        },
        function verifyProcessNotInLibrary( err, library ) {
            if( err ) throw err;
            
            assert( library.filter( function(item) { return item.id === createdProcess.id; } ).length == 0, "Process still present in library" );
            
            console.log("Library verified, deleting library...");
            
            conn.deleteProcessLibrary( {id:processLibraryId}, this );
        },
        function onLibraryDeleted( err, data ) {
            console.log("Library deleted, test completed ok!");
        }
    );
})();
