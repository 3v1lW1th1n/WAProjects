/****************************************************************** 
	Licensed Materials - Property of IBM

	5698-WSE
	(C) Copyright IBM Corp. 2014-2015 All Rights Reserved.
	US Government Users Restricted Rights - Use, duplication,
	or disclosure restricted by GSA ADP Schedule Contract with
	IBM Corp.

*******************************************************************/
var Step = require('../Step');

/**
    Creates a step for querying a database.
    
    @constructor
    @param {string} agent - Agent name
    @param {string} operation - Either FileTransferStep.OperationUpload or FileTransferStep.OperationDownload
*/
function FileTransferStep( agent, operation ) {
    Step.call(this);
 
    this.type = "filetransfer";
    this.target = agent;
    this.properties.Operation = operation;
    this.properties.Protocol = this.ProtocolAuto;
    this.properties.ConvertCodepage = "";
    this.properties.LocalCodepage = "";
    this.properties.MinPort = "";
    this.properties.MaxPort = "";
    this.properties.tws_CheckboxVariableResolution = true;
}

FileTransferStep.OperationUpload = "Upload";
FileTransferStep.OperationDownload = "Download";

FileTransferStep.ProtocolAuto = "Auto";
FileTransferStep.ProtocolFTP = "FTP";
FileTransferStep.ProtocolFTPES = "FTPES";
FileTransferStep.ProtocolSSH = "SSH";
FileTransferStep.ProtocolWindows = "WINDOWS";

/**
    Sets the transfer mode.
    
    @param {boolean} passive - True for passive mode
    @param {boolean} binary - True for binary
    @param {number} timeout - (Optional) Timeout value
*/
FileTransferStep.prototype.setMode = function( passive, binary, timeout ) {
    var props = this.properties;
    
    props.ActiveMode = ! passive;
    props.PassiveMode = !! passive;
    
    props.Ascii = ! binary;
    props.Binary = !! binary;
    
    props.Timeout = timeout || 0;
    
    return this;
}

/**
    Sets the local file.
    
    @param {string} file - Path to local file
    @param {string} user - Name of user that has permission to access the local file
    @param {string} password - User password
*/
FileTransferStep.prototype.setLocalFile = function( file, user, password ) {
    var props = this.properties;
    
    props.LocalFile = file;
    props.LocalUser = user;
    props.LocalPassword = password;
    
    return this;
}

/**
    Sets the local file.
    
    @param {string} server - Server address
    @param {string} file - Path to remote file
    @param {string} user - Name of user that has permission to access the remote file
    @param {string} password - User password
*/
FileTransferStep.prototype.setRemoteFile = function( server, file, user, password ) {
    var props = this.properties;
    
    props.RemoteFile = file;
    props.RemoteUser = user;
    props.RemotePassword = password;
    props.Server = server;
    
    return this;
}

/**
    Sets the transfer protocol.
    
    <p>Supported protocols are:
    <ul>
    <li>FileTransferStep.ProtocolAuto: Automatic
    <li>FileTransferStep.ProtocolFTP: FTP (File Transfer Protocol)
    <li>FileTransferStep.ProtocolFTPES: Secure FTP
    <li>FileTransferStep.ProtocolSSH: SSH (Secure Shell)
    <li>FileTransferStep.ProtocolWindows: Windows
    </ul>
    
    @param {string} protocol - Transfer protocol
*/
FileTransferStep.prototype.setProtocol = function( protocol ) {
    this.properties.Protocol = protocol;
    
    return this;
}

module.exports = FileTransferStep;
