/****************************************************************** 
	Licensed Materials - Property of IBM

	5698-WSE
	(C) Copyright IBM Corp. 2014-2015 All Rights Reserved.
	US Government Users Restricted Rights - Use, duplication,
	or disclosure restricted by GSA ADP Schedule Contract with
	IBM Corp.

*******************************************************************/
var Step = require('../Step');

/**
    Creates an MQTT step.
    
    @constructor
    @property {string}  {string} agent - Agent name
*/
function MqttStep( agent ) {
    Step.call(this);
    
    this.type = "mqtt";
    this.target = agent;
}

MqttStep.NONE = "none";
MqttStep.TLSV1 = "tlsv1";
MqttStep.TLSV11 = "tlsv11";
MqttStep.TLSV12 = "tlsv12";

/**
 * MQTT connection parameters.
 * @typedef {object} connection_param
 * @property {string} server - The IP or hostname of the MQTT Broker.
 * @property {number} port - The port number where the MQTT broker is listening.
 * @property {string} tlsVersion - The TLS version to be used. Must match the protocol version used by the broker. Possible values: {"tlsv1", "tlsv11", "tlsv12"}
 * @property {string} username - Username to be used for authenticating with the broker. This requires a broker that supports MQTT v3.1. 
 * @property {string} password - The password to be used for authenticating with the broker. Using this argument without also specifying a username is invalid. This requires a broker that supports MQTT v3.1. 
 * @property {string} keyStoreFilePath - The path of the keystore file containing the private key that is used to make the connection.
 * @property {string} keyStorePassword - The password that protects the private key and is required to make the connection.
 * @property {string} clientId - The id to use for this client. 
 * @property {number} timeout - Defines the maximum time interval the client will wait for the network connection to the MQTT server to be established. The default timeout is 30 seconds.
 */
MqttStep.prototype.setConnection = function( connection_param ) {
    var props = this.properties;
    
    props.Server = connection_param.server;
    props.Port = connection_param.port;
    props.ClientID = connection_param.clientId;
    props.RadioButtonNone = connection_param.hasOwnProperty("tlsVersion") ? connection_param.tlsVersion === MqttStep.NONE : true;
    props.RadioButtonTLSv1 = connection_param.hasOwnProperty("tlsVersion") ? connection_param.tlsVersion === MqttStep.TLSV1 : false;
    props.RadioButtonTLSv11 = connection_param.hasOwnProperty("tlsVersion") ? connection_param.tlsVersion === MqttStep.TLSV11 : false;
    props.RadioButtonTLSv12 = connection_param.hasOwnProperty("tlsVersion") ? connection_param.tlsVersion === MqttStep.TLSV12 : false;
    props.userName = connection_param.hasOwnProperty("username") ? connection_param.username : "defaultValue";
    props.password = connection_param.hasOwnProperty("password") ? connection_param.password : "defaultValue";
    props.keyStoreFilePath = connection_param.hasOwnProperty("keyStoreFilePath") ? connection_param.keyStoreFilePath : "defaultValue";
    props.keyStorePassword = connection_param.hasOwnProperty("keyStorePassword") ? connection_param.keyStorePassword : "defaultValue";
    props.Timeout = connection_param.hasOwnProperty("timeout") ? connection_param.timeout : "30";

    return this;
};

 
/**
 * MQTT action parameters.
 * @typedef {object} action_param
 * @property {string} topic - The MQTT topic to subscribe to. 
 * @property {number} qos - The quality of service desired for the incoming messages, from 0, 1 and 2. Defaults to 0.
 * @property {boolean} isPublish - true if the action is Publish, false if Subscribe.
 * @property {string} mqttMessage -For a publish action, contains the message to be sent.
 */
MqttStep.prototype.setAction = function( action_param ) {
    var props = this.properties;

    if (!action_param.hasOwnProperty("isPublish")) {
        if (action_param.hasOwnProperty("mqttMessage")) {
            action_param.isPublish = true;
        } else {
            action_param.isPublish = false;
        }
    }

    props.Topic = action_param.topic;
    props.qos = action_param.hasOwnProperty("qos") ? action_param.qos : "0";
    props.SubscribeMqtt = !action_param.isPublish;
    props.PublishMqtt = action_param.isPublish;
    props.MQTTMessage = action_param.mqttMessage;

    return this;
};

module.exports = MqttStep;