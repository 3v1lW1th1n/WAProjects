/****************************************************************** 
	Licensed Materials - Property of IBM

	5698-WSE
	(C) Copyright IBM Corp. 2014-2015 All Rights Reserved.
	US Government Users Restricted Rights - Use, duplication,
	or disclosure restricted by GSA ADP Schedule Contract with
	IBM Corp.

*******************************************************************/
var Step = require('../Step');

/**
    Creates a step for querying a database.
    
    @constructor
    @param {string} agent - Agent name
*/
function DatabaseStep( agent ) {
    Step.call(this);
    
    this.type = "database";
    this.agent = agent;
}

DatabaseStep.TypeCustom = "custom";
DatabaseStep.TypeMsSQL = "mssql";
DatabaseStep.TypeOracle = "oracle";
DatabaseStep.TypeDB2 = "db2";
DatabaseStep.TypeNetezza = "netezza";

/**
 * Database connection parameters.
 
 * @typedef {object} conn_options
 * @property {string} dbms - database type
 * @property {string} dbname - database name
 * @property {string} server - database server address
 * @property {number} port - database server port number
 * @property {string} jdbc_jarpath - path of JDBC driver(s) JAR file(s)
 * @property {string} remote_user - name of remote user
 * @property {string} remote_password - password of remote user
 */

/**
 * Database custom connection parameters.
 
 * @typedef {object} custom_conn_options
 * @property {string} jdbc_jarpath - path of JDBC driver(s) JAR file(s)
 * @property {string} jdbc_driver - name of JDBC driver
 * @property {string} jdbc_connection - JDBC connection parameters
 * @property {string} remote_user - name of remote user
 * @property {string} remote_password - password of remote user
 */



/**
    Sets the parameters for connecting to the database.
    
    <p>Supported database types:
    <ul>
    <li>DatabaseStep.TypeDB2
    <li>DatabaseStep.TypeMsSQL
    <li>DatabaseStep.TypeNetezza
    <li>DatabaseStep.TypeOracle
    </ul>
    
    @param {conn_options} conn_options - Connections parameters
    
    @see setCustomConnection
*/
DatabaseStep.prototype.setConnection = function( conn_options ) {
    var props = this.properties;
    
    props.dbms = conn_options.dbms;
    props.DBname = conn_options.dbname;
    props.Server = conn_options.server;
    props.Port = conn_options.port;
    props.Jdbc_driver = conn_options.jdbc_driver;
    props.Jdbc_connection = conn_options.jdbc_connection;
    props.Jdbc_jarpath = conn_options.jdbc_jarpath;
    props.RemoteUser = conn_options.remote_user;
    props.RemotePassword = conn_options.remote_password;
    props.CustomDatabase = (conn_options.dbms == DatabaseStep.TypeCustom);
    props.PredefinedDatabase = ! props.CustomDatabase;
    
    return this;
}

/**
    Sets the parameters for creating a custom connection to a database.
    
    @param {custom_conn_options} conn_options - Connections options
    
    @see setConnection
*/
DatabaseStep.prototype.setCustomConnection = function( conn_options ) {
    var props = this.properties;
    
    props.dbms = DatabaseStep.TypeCustom;
    props.Jdbc_driver = conn_options.jdbc_driver;
    props.Jdbc_connection = conn_options.jdbc_connection;
    props.Jdbc_jarpath = conn_options.jdbc_jarpath;
    props.RemoteUser = conn_options.remote_user;
    props.RemotePassword = conn_options.remote_password;
    props.CustomDatabase = true;
    props.PredefinedDatabase = false;
    
    return this;
}

/**
    Sets a list of SQL statements to run during this step.
    
    @param statements - Array of SQL statements
 */
DatabaseStep.prototype.setSQL = function( statements ) {
    var props = this.properties;
    
    props.type = "sql";
    props.StoredProcedureRadioButton = false;
    props.SQLRadioButton = true;
    
    if( statements ) this.SQLStatements = statements;
    
    return this;
}

/**
    Sets a stored procedure to run during this step.
    
    @param {string} name - Name of stored procedure
    @param params - Stored procedure parameters
 */
DatabaseStep.prototype.setStoredProcedure = function( name, params ) {
    var props = this.properties;
    
    props.type = "storedProcedure";
    props.StoredProcedureRadioButton = true;
    props.SQLRadioButton = false;
    
    if( name ) props.ProcedureName = name;
    if( params ) props.ProcedureParameters = params;
    
    return this;
}

module.exports = DatabaseStep;
